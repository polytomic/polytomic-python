# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .schema_association import SchemaAssociation
import pydantic
from .util_field_type import UtilFieldType
from .types_type import TypesType
from .pick_value import PickValue
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class SchemaField(UniversalBaseModel):
    association: typing.Optional[SchemaAssociation] = None
    id: typing.Optional[str] = None
    name: typing.Optional[str] = None
    remote_type: typing.Optional[str] = pydantic.Field(default=None)
    """
    The type of the field from the remote system.
    """

    type: typing.Optional[UtilFieldType] = None
    type_spec: typing.Optional[TypesType] = None
    values: typing.Optional[typing.List[PickValue]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
