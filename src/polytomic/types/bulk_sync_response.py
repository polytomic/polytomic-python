# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
from .bulk_itemized_schedule import BulkItemizedSchedule
from .bulk_multi_schedule_configuration import BulkMultiScheduleConfiguration
from .bulk_schedule import BulkSchedule
import typing
from .bulk_discover import BulkDiscover
import datetime as dt
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class BulkSyncResponse(UniversalBaseModel):
    active: typing.Optional[bool] = None
    automatically_add_new_fields: typing.Optional[BulkDiscover] = None
    automatically_add_new_objects: typing.Optional[BulkDiscover] = None
    data_cutoff_timestamp: typing.Optional[dt.datetime] = None
    destination_configuration: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(
        default=None
    )
    """
    Destination-specific bulk sync configuration. e.g. output schema name, s3 file format, etc.
    """

    destination_connection_id: typing.Optional[str] = None
    disable_record_timestamps: typing.Optional[bool] = None
    discover: typing.Optional[bool] = pydantic.Field(default=None)
    """
    DEPRECATED: Use automatically_add_new_objects/automatically_add_new_fields instead
    """

    id: typing.Optional[str] = None
    mode: typing.Optional[str] = None
    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of the bulk sync
    """

    organization_id: typing.Optional[str] = None
    policies: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    List of permissions policies applied to the bulk sync.
    """

    schedule: typing.Optional[BulkSchedule] = None
    source_configuration: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Source-specific bulk sync configuration. e.g. replication slot name, sync lookback, etc.
    """

    source_connection_id: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
