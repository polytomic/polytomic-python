# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .work_task_status import WorkTaskStatus
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class V4RunQueryResult(UniversalBaseModel):
    count: typing.Optional[int] = pydantic.Field(default=None)
    """
    The number of rows returned by the query. This will not be returned until the query completes.
    """

    error: typing.Optional[str] = None
    expires: typing.Optional[str] = pydantic.Field(default=None)
    """
    The time at which the query will expire and be deleted. This will not be returned until the query completes.
    """

    fields: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    The names of the fields returned by the query. This will not be returned until the query completes.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the query task.
    """

    results: typing.Optional[typing.List[typing.Dict[str, typing.Optional[typing.Any]]]] = pydantic.Field(default=None)
    """
    The query results, returned as an array of objects.
    """

    status: typing.Optional[WorkTaskStatus] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
