# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .source import Source
import pydantic
from .filter_field_reference_type import FilterFieldReferenceType
from .filter_function import FilterFunction
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Filter(UniversalBaseModel):
    """
    Either `field` or `field_id` must be provided. If `field` is provided, `field_id` is ignored.
    """

    field: typing.Optional[Source] = None
    field_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Model or Target field name to filter on.
    """

    field_type: typing.Optional[FilterFieldReferenceType] = None
    function: FilterFunction
    label: typing.Optional[str] = None
    value: typing.Optional[typing.Optional[typing.Any]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
