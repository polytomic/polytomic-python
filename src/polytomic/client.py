# This file was auto-generated by Fern from our API Definition.

import typing

import httpx
import typing_extensions

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import PolytomicEnvironment
from .resources.bulk_sync.client import AsyncBulkSyncClient, BulkSyncClient
from .resources.connections.client import AsyncConnectionsClient, ConnectionsClient
from .resources.events.client import AsyncEventsClient, EventsClient
from .resources.model_sync.client import AsyncModelSyncClient, ModelSyncClient
from .resources.models.client import AsyncModelsClient, ModelsClient
from .resources.organization.client import AsyncOrganizationClient, OrganizationClient
from .resources.permissions.client import AsyncPermissionsClient, PermissionsClient
from .resources.schemas.client import AsyncSchemasClient, SchemasClient
from .resources.users.client import AsyncUsersClient, UsersClient
from .resources.webhooks.client import AsyncWebhooksClient, WebhooksClient


class Polytomic:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: PolytomicEnvironment = PolytomicEnvironment.DEFAULT,
        polytomic_version: typing.Optional[typing_extensions.Literal["2022-12-12"]] = None,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            polytomic_version=polytomic_version,
            token=token,
            httpx_client=httpx.Client(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.bulk_sync = BulkSyncClient(client_wrapper=self._client_wrapper)
        self.connections = ConnectionsClient(client_wrapper=self._client_wrapper)
        self.schemas = SchemasClient(client_wrapper=self._client_wrapper)
        self.events = EventsClient(client_wrapper=self._client_wrapper)
        self.models = ModelsClient(client_wrapper=self._client_wrapper)
        self.organization = OrganizationClient(client_wrapper=self._client_wrapper)
        self.users = UsersClient(client_wrapper=self._client_wrapper)
        self.permissions = PermissionsClient(client_wrapper=self._client_wrapper)
        self.model_sync = ModelSyncClient(client_wrapper=self._client_wrapper)
        self.webhooks = WebhooksClient(client_wrapper=self._client_wrapper)


class AsyncPolytomic:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: PolytomicEnvironment = PolytomicEnvironment.DEFAULT,
        polytomic_version: typing.Optional[typing_extensions.Literal["2022-12-12"]] = None,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            polytomic_version=polytomic_version,
            token=token,
            httpx_client=httpx.AsyncClient(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.bulk_sync = AsyncBulkSyncClient(client_wrapper=self._client_wrapper)
        self.connections = AsyncConnectionsClient(client_wrapper=self._client_wrapper)
        self.schemas = AsyncSchemasClient(client_wrapper=self._client_wrapper)
        self.events = AsyncEventsClient(client_wrapper=self._client_wrapper)
        self.models = AsyncModelsClient(client_wrapper=self._client_wrapper)
        self.organization = AsyncOrganizationClient(client_wrapper=self._client_wrapper)
        self.users = AsyncUsersClient(client_wrapper=self._client_wrapper)
        self.permissions = AsyncPermissionsClient(client_wrapper=self._client_wrapper)
        self.model_sync = AsyncModelSyncClient(client_wrapper=self._client_wrapper)
        self.webhooks = AsyncWebhooksClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: PolytomicEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
