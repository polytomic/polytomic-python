# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.list_bulk_schema import ListBulkSchema
from ...core.jsonable_encoder import jsonable_encoder
from ...core.pydantic_utilities import parse_obj_as
from ...errors.unauthorized_error import UnauthorizedError
from ...types.rest_err_response import RestErrResponse
from ...errors.not_found_error import NotFoundError
from ...types.api_error import ApiError as types_api_error_ApiError
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError as core_api_error_ApiError
from ...types.bulk_schema import BulkSchema
from ...core.serialization import convert_and_respect_annotation_metadata
from ...errors.bad_request_error import BadRequestError
from ...errors.forbidden_error import ForbiddenError
from ...errors.internal_server_error import InternalServerError
from ...types.bulk_schema_envelope import BulkSchemaEnvelope
import datetime as dt
from ...types.bulk_field import BulkField
from ...types.bulk_filter import BulkFilter
from ...core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SchemasClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        id: str,
        *,
        filters: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListBulkSchema:
        """
        Parameters
        ----------
        id : str

        filters : typing.Optional[typing.Dict[str, typing.Optional[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListBulkSchema
            OK

        Examples
        --------
        from polytomic import Polytomic

        client = Polytomic(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.bulk_sync.schemas.list(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/bulk/syncs/{jsonable_encoder(id)}/schemas",
            method="GET",
            params={
                "filters": filters,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListBulkSchema,
                    parse_obj_as(
                        type_=ListBulkSchema,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        RestErrResponse,
                        parse_obj_as(
                            type_=RestErrResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def patch(
        self,
        id: str,
        *,
        schemas: typing.Optional[typing.Sequence[BulkSchema]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListBulkSchema:
        """
        Parameters
        ----------
        id : str

        schemas : typing.Optional[typing.Sequence[BulkSchema]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListBulkSchema
            OK

        Examples
        --------
        from polytomic import Polytomic

        client = Polytomic(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.bulk_sync.schemas.patch(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/bulk/syncs/{jsonable_encoder(id)}/schemas",
            method="PATCH",
            json={
                "schemas": convert_and_respect_annotation_metadata(
                    object_=schemas, annotation=typing.Sequence[BulkSchema], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListBulkSchema,
                    parse_obj_as(
                        type_=ListBulkSchema,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        RestErrResponse,
                        parse_obj_as(
                            type_=RestErrResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, id: str, schema_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BulkSchemaEnvelope:
        """
        Parameters
        ----------
        id : str

        schema_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkSchemaEnvelope
            OK

        Examples
        --------
        from polytomic import Polytomic

        client = Polytomic(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.bulk_sync.schemas.get(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
            schema_id="Contact",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/bulk/syncs/{jsonable_encoder(id)}/schemas/{jsonable_encoder(schema_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BulkSchemaEnvelope,
                    parse_obj_as(
                        type_=BulkSchemaEnvelope,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        RestErrResponse,
                        parse_obj_as(
                            type_=RestErrResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: str,
        schema_id: str,
        *,
        data_cutoff_timestamp: typing.Optional[dt.datetime] = OMIT,
        disable_data_cutoff: typing.Optional[bool] = OMIT,
        enabled: typing.Optional[bool] = OMIT,
        fields: typing.Optional[typing.Sequence[BulkField]] = OMIT,
        filters: typing.Optional[typing.Sequence[BulkFilter]] = OMIT,
        partition_key: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkSchemaEnvelope:
        """
        Parameters
        ----------
        id : str

        schema_id : str

        data_cutoff_timestamp : typing.Optional[dt.datetime]

        disable_data_cutoff : typing.Optional[bool]

        enabled : typing.Optional[bool]

        fields : typing.Optional[typing.Sequence[BulkField]]

        filters : typing.Optional[typing.Sequence[BulkFilter]]

        partition_key : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkSchemaEnvelope
            OK

        Examples
        --------
        from polytomic import Polytomic

        client = Polytomic(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.bulk_sync.schemas.update(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
            schema_id="contact",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/bulk/syncs/{jsonable_encoder(id)}/schemas/{jsonable_encoder(schema_id)}",
            method="PUT",
            json={
                "data_cutoff_timestamp": data_cutoff_timestamp,
                "disable_data_cutoff": disable_data_cutoff,
                "enabled": enabled,
                "fields": convert_and_respect_annotation_metadata(
                    object_=fields, annotation=typing.Sequence[BulkField], direction="write"
                ),
                "filters": convert_and_respect_annotation_metadata(
                    object_=filters, annotation=typing.Sequence[BulkFilter], direction="write"
                ),
                "partition_key": partition_key,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BulkSchemaEnvelope,
                    parse_obj_as(
                        type_=BulkSchemaEnvelope,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        RestErrResponse,
                        parse_obj_as(
                            type_=RestErrResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSchemasClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        id: str,
        *,
        filters: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListBulkSchema:
        """
        Parameters
        ----------
        id : str

        filters : typing.Optional[typing.Dict[str, typing.Optional[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListBulkSchema
            OK

        Examples
        --------
        import asyncio

        from polytomic import AsyncPolytomic

        client = AsyncPolytomic(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.bulk_sync.schemas.list(
                id="248df4b7-aa70-47b8-a036-33ac447e668d",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/bulk/syncs/{jsonable_encoder(id)}/schemas",
            method="GET",
            params={
                "filters": filters,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListBulkSchema,
                    parse_obj_as(
                        type_=ListBulkSchema,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        RestErrResponse,
                        parse_obj_as(
                            type_=RestErrResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def patch(
        self,
        id: str,
        *,
        schemas: typing.Optional[typing.Sequence[BulkSchema]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListBulkSchema:
        """
        Parameters
        ----------
        id : str

        schemas : typing.Optional[typing.Sequence[BulkSchema]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListBulkSchema
            OK

        Examples
        --------
        import asyncio

        from polytomic import AsyncPolytomic

        client = AsyncPolytomic(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.bulk_sync.schemas.patch(
                id="248df4b7-aa70-47b8-a036-33ac447e668d",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/bulk/syncs/{jsonable_encoder(id)}/schemas",
            method="PATCH",
            json={
                "schemas": convert_and_respect_annotation_metadata(
                    object_=schemas, annotation=typing.Sequence[BulkSchema], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListBulkSchema,
                    parse_obj_as(
                        type_=ListBulkSchema,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        RestErrResponse,
                        parse_obj_as(
                            type_=RestErrResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, id: str, schema_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BulkSchemaEnvelope:
        """
        Parameters
        ----------
        id : str

        schema_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkSchemaEnvelope
            OK

        Examples
        --------
        import asyncio

        from polytomic import AsyncPolytomic

        client = AsyncPolytomic(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.bulk_sync.schemas.get(
                id="248df4b7-aa70-47b8-a036-33ac447e668d",
                schema_id="Contact",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/bulk/syncs/{jsonable_encoder(id)}/schemas/{jsonable_encoder(schema_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BulkSchemaEnvelope,
                    parse_obj_as(
                        type_=BulkSchemaEnvelope,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        RestErrResponse,
                        parse_obj_as(
                            type_=RestErrResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: str,
        schema_id: str,
        *,
        data_cutoff_timestamp: typing.Optional[dt.datetime] = OMIT,
        disable_data_cutoff: typing.Optional[bool] = OMIT,
        enabled: typing.Optional[bool] = OMIT,
        fields: typing.Optional[typing.Sequence[BulkField]] = OMIT,
        filters: typing.Optional[typing.Sequence[BulkFilter]] = OMIT,
        partition_key: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkSchemaEnvelope:
        """
        Parameters
        ----------
        id : str

        schema_id : str

        data_cutoff_timestamp : typing.Optional[dt.datetime]

        disable_data_cutoff : typing.Optional[bool]

        enabled : typing.Optional[bool]

        fields : typing.Optional[typing.Sequence[BulkField]]

        filters : typing.Optional[typing.Sequence[BulkFilter]]

        partition_key : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkSchemaEnvelope
            OK

        Examples
        --------
        import asyncio

        from polytomic import AsyncPolytomic

        client = AsyncPolytomic(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.bulk_sync.schemas.update(
                id="248df4b7-aa70-47b8-a036-33ac447e668d",
                schema_id="contact",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/bulk/syncs/{jsonable_encoder(id)}/schemas/{jsonable_encoder(schema_id)}",
            method="PUT",
            json={
                "data_cutoff_timestamp": data_cutoff_timestamp,
                "disable_data_cutoff": disable_data_cutoff,
                "enabled": enabled,
                "fields": convert_and_respect_annotation_metadata(
                    object_=fields, annotation=typing.Sequence[BulkField], direction="write"
                ),
                "filters": convert_and_respect_annotation_metadata(
                    object_=filters, annotation=typing.Sequence[BulkFilter], direction="write"
                ),
                "partition_key": partition_key,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BulkSchemaEnvelope,
                    parse_obj_as(
                        type_=BulkSchemaEnvelope,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        RestErrResponse,
                        parse_obj_as(
                            type_=RestErrResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)
