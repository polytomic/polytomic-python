# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.unauthorized_error import UnauthorizedError
from ...types.bulk_schedule import BulkSchedule
from ...types.rest_err_response import RestErrResponse
from ...types.v_2_activate_sync_envelope import V2ActivateSyncEnvelope
from ...types.v_2_activate_sync_input import V2ActivateSyncInput
from ...types.v_2_bulk_sync_dest_envelope import V2BulkSyncDestEnvelope
from ...types.v_2_bulk_sync_list_envelope import V2BulkSyncListEnvelope
from ...types.v_2_bulk_sync_response_envelope import V2BulkSyncResponseEnvelope
from ...types.v_3_bulk_sync_source_envelope import V3BulkSyncSourceEnvelope
from ...types.v_3_bulk_sync_source_schema_envelope import V3BulkSyncSourceSchemaEnvelope
from ...types.v_3_bulk_sync_source_status_envelope import V3BulkSyncSourceStatusEnvelope
from ...types.v_3_bulk_sync_status_envelope import V3BulkSyncStatusEnvelope
from .resources.executions.client import AsyncExecutionsClient, ExecutionsClient
from .resources.schemas.client import AsyncSchemasClient, SchemasClient

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BulkSyncClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        self.executions = ExecutionsClient(client_wrapper=self._client_wrapper)
        self.schemas = SchemasClient(client_wrapper=self._client_wrapper)

    def get_destination(self, id: str) -> V2BulkSyncDestEnvelope:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.bulk_sync.get_destination(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/bulk/dest/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2BulkSyncDestEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_source(
        self,
        connection_id: str,
        *,
        refresh_schemas: typing.Optional[bool] = None,
        include_fields: typing.Optional[bool] = None,
    ) -> V3BulkSyncSourceEnvelope:
        """
        Parameters:
            - connection_id: str.

            - refresh_schemas: typing.Optional[bool].

            - include_fields: typing.Optional[bool].
        ---
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.bulk_sync.get_source(
            connection_id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/bulk/source/{connection_id}"),
            params=remove_none_from_dict({"refresh_schemas": refresh_schemas, "include_fields": include_fields}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V3BulkSyncSourceEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_source_schema(self, connection_id: str, schema_id: str) -> V3BulkSyncSourceSchemaEnvelope:
        """
        Parameters:
            - connection_id: str.

            - schema_id: str.
        ---
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.bulk_sync.get_source_schema(
            connection_id="248df4b7-aa70-47b8-a036-33ac447e668d",
            schema_id="schema_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/bulk/source/{connection_id}/schema/{schema_id}"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V3BulkSyncSourceSchemaEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_3_get_bulk_source_status(self, connection_id: str) -> V3BulkSyncSourceStatusEnvelope:
        """
        Parameters:
            - connection_id: str.
        ---
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.bulk_sync.api_v_3_get_bulk_source_status(
            connection_id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/bulk/source/{connection_id}/status"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V3BulkSyncSourceStatusEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(self) -> V2BulkSyncListEnvelope:
        """
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.bulk_sync.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/bulk/syncs"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2BulkSyncListEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        active: typing.Optional[bool] = OMIT,
        automatically_add_new_fields: typing.Optional[bool] = OMIT,
        automatically_add_new_objects: typing.Optional[bool] = OMIT,
        destination_configuration: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        destination_connection_id: str,
        disable_record_timestamps: typing.Optional[bool] = OMIT,
        discover: typing.Optional[bool] = OMIT,
        mode: str,
        name: str,
        organization_id: typing.Optional[str] = OMIT,
        policies: typing.Optional[typing.List[str]] = OMIT,
        schedule: BulkSchedule,
        schemas: typing.Optional[typing.List[str]] = OMIT,
        source_configuration: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        source_connection_id: str,
    ) -> V2BulkSyncResponseEnvelope:
        """
        Parameters:
            - active: typing.Optional[bool].

            - automatically_add_new_fields: typing.Optional[bool].

            - automatically_add_new_objects: typing.Optional[bool].

            - destination_configuration: typing.Optional[typing.Dict[str, typing.Any]].

            - destination_connection_id: str.

            - disable_record_timestamps: typing.Optional[bool].

            - discover: typing.Optional[bool]. DEPRECATED: Use automatically_add_new_objects/automatically_add_new_fields instead

            - mode: str.

            - name: str.

            - organization_id: typing.Optional[str].

            - policies: typing.Optional[typing.List[str]].

            - schedule: BulkSchedule.

            - schemas: typing.Optional[typing.List[str]].

            - source_configuration: typing.Optional[typing.Dict[str, typing.Any]].

            - source_connection_id: str.
        ---
        from polytomic import BulkSchedule
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.bulk_sync.create(
            destination_connection_id="248df4b7-aa70-47b8-a036-33ac447e668d",
            mode="mode",
            name="name",
            schedule=BulkSchedule(
                frequency="frequency",
            ),
            source_connection_id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _request: typing.Dict[str, typing.Any] = {
            "destination_connection_id": destination_connection_id,
            "mode": mode,
            "name": name,
            "schedule": schedule,
            "source_connection_id": source_connection_id,
        }
        if active is not OMIT:
            _request["active"] = active
        if automatically_add_new_fields is not OMIT:
            _request["automatically_add_new_fields"] = automatically_add_new_fields
        if automatically_add_new_objects is not OMIT:
            _request["automatically_add_new_objects"] = automatically_add_new_objects
        if destination_configuration is not OMIT:
            _request["destination_configuration"] = destination_configuration
        if disable_record_timestamps is not OMIT:
            _request["disable_record_timestamps"] = disable_record_timestamps
        if discover is not OMIT:
            _request["discover"] = discover
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        if policies is not OMIT:
            _request["policies"] = policies
        if schemas is not OMIT:
            _request["schemas"] = schemas
        if source_configuration is not OMIT:
            _request["source_configuration"] = source_configuration
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/bulk/syncs"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2BulkSyncResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, id: str, *, refresh_schemas: typing.Optional[bool] = None) -> V2BulkSyncResponseEnvelope:
        """
        Parameters:
            - id: str.

            - refresh_schemas: typing.Optional[bool].
        ---
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.bulk_sync.get(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/bulk/syncs/{id}"),
            params=remove_none_from_dict({"refresh_schemas": refresh_schemas}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2BulkSyncResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def remove(self, id: str, *, refresh_schemas: typing.Optional[bool] = None) -> None:
        """
        Parameters:
            - id: str.

            - refresh_schemas: typing.Optional[bool].
        ---
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.bulk_sync.remove(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/bulk/syncs/{id}"),
            params=remove_none_from_dict({"refresh_schemas": refresh_schemas}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: str,
        *,
        active: typing.Optional[bool] = OMIT,
        destination_configuration: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        destination_connection_id: str,
        discover: typing.Optional[bool] = OMIT,
        mode: str,
        name: str,
        organization_id: typing.Optional[str] = OMIT,
        policies: typing.Optional[typing.List[str]] = OMIT,
        schedule: BulkSchedule,
        source_configuration: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        source_connection_id: str,
    ) -> V2BulkSyncResponseEnvelope:
        """
        > 📘 Updating schemas
        >
        > Schema updates can be performed using the [Update Bulk Sync Schemas](https://docs.polytomic.com/reference/apiv3updatebulksyncschemas) endpoint.

        Parameters:
            - id: str.

            - active: typing.Optional[bool].

            - destination_configuration: typing.Optional[typing.Dict[str, typing.Any]].

            - destination_connection_id: str.

            - discover: typing.Optional[bool].

            - mode: str.

            - name: str.

            - organization_id: typing.Optional[str].

            - policies: typing.Optional[typing.List[str]].

            - schedule: BulkSchedule.

            - source_configuration: typing.Optional[typing.Dict[str, typing.Any]].

            - source_connection_id: str.
        ---
        from polytomic import BulkSchedule
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.bulk_sync.update(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
            destination_connection_id="248df4b7-aa70-47b8-a036-33ac447e668d",
            mode="mode",
            name="name",
            schedule=BulkSchedule(
                frequency="frequency",
            ),
            source_connection_id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _request: typing.Dict[str, typing.Any] = {
            "destination_connection_id": destination_connection_id,
            "mode": mode,
            "name": name,
            "schedule": schedule,
            "source_connection_id": source_connection_id,
        }
        if active is not OMIT:
            _request["active"] = active
        if destination_configuration is not OMIT:
            _request["destination_configuration"] = destination_configuration
        if discover is not OMIT:
            _request["discover"] = discover
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        if policies is not OMIT:
            _request["policies"] = policies
        if source_configuration is not OMIT:
            _request["source_configuration"] = source_configuration
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/bulk/syncs/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2BulkSyncResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def activate(self, id: str, *, request: V2ActivateSyncInput) -> V2ActivateSyncEnvelope:
        """
        Parameters:
            - id: str.

            - request: V2ActivateSyncInput.
        ---
        from polytomic import V2ActivateSyncInput
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.bulk_sync.activate(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
            request=V2ActivateSyncInput(
                active=True,
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/bulk/syncs/{id}/activate"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2ActivateSyncEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_status(self, id: str) -> V3BulkSyncStatusEnvelope:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.bulk_sync.get_status(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/bulk/syncs/{id}/status"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V3BulkSyncStatusEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncBulkSyncClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        self.executions = AsyncExecutionsClient(client_wrapper=self._client_wrapper)
        self.schemas = AsyncSchemasClient(client_wrapper=self._client_wrapper)

    async def get_destination(self, id: str) -> V2BulkSyncDestEnvelope:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.bulk_sync.get_destination(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/bulk/dest/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2BulkSyncDestEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_source(
        self,
        connection_id: str,
        *,
        refresh_schemas: typing.Optional[bool] = None,
        include_fields: typing.Optional[bool] = None,
    ) -> V3BulkSyncSourceEnvelope:
        """
        Parameters:
            - connection_id: str.

            - refresh_schemas: typing.Optional[bool].

            - include_fields: typing.Optional[bool].
        ---
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.bulk_sync.get_source(
            connection_id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/bulk/source/{connection_id}"),
            params=remove_none_from_dict({"refresh_schemas": refresh_schemas, "include_fields": include_fields}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V3BulkSyncSourceEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_source_schema(self, connection_id: str, schema_id: str) -> V3BulkSyncSourceSchemaEnvelope:
        """
        Parameters:
            - connection_id: str.

            - schema_id: str.
        ---
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.bulk_sync.get_source_schema(
            connection_id="248df4b7-aa70-47b8-a036-33ac447e668d",
            schema_id="schema_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/bulk/source/{connection_id}/schema/{schema_id}"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V3BulkSyncSourceSchemaEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_3_get_bulk_source_status(self, connection_id: str) -> V3BulkSyncSourceStatusEnvelope:
        """
        Parameters:
            - connection_id: str.
        ---
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.bulk_sync.api_v_3_get_bulk_source_status(
            connection_id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/bulk/source/{connection_id}/status"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V3BulkSyncSourceStatusEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(self) -> V2BulkSyncListEnvelope:
        """
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.bulk_sync.list()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/bulk/syncs"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2BulkSyncListEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        active: typing.Optional[bool] = OMIT,
        automatically_add_new_fields: typing.Optional[bool] = OMIT,
        automatically_add_new_objects: typing.Optional[bool] = OMIT,
        destination_configuration: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        destination_connection_id: str,
        disable_record_timestamps: typing.Optional[bool] = OMIT,
        discover: typing.Optional[bool] = OMIT,
        mode: str,
        name: str,
        organization_id: typing.Optional[str] = OMIT,
        policies: typing.Optional[typing.List[str]] = OMIT,
        schedule: BulkSchedule,
        schemas: typing.Optional[typing.List[str]] = OMIT,
        source_configuration: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        source_connection_id: str,
    ) -> V2BulkSyncResponseEnvelope:
        """
        Parameters:
            - active: typing.Optional[bool].

            - automatically_add_new_fields: typing.Optional[bool].

            - automatically_add_new_objects: typing.Optional[bool].

            - destination_configuration: typing.Optional[typing.Dict[str, typing.Any]].

            - destination_connection_id: str.

            - disable_record_timestamps: typing.Optional[bool].

            - discover: typing.Optional[bool]. DEPRECATED: Use automatically_add_new_objects/automatically_add_new_fields instead

            - mode: str.

            - name: str.

            - organization_id: typing.Optional[str].

            - policies: typing.Optional[typing.List[str]].

            - schedule: BulkSchedule.

            - schemas: typing.Optional[typing.List[str]].

            - source_configuration: typing.Optional[typing.Dict[str, typing.Any]].

            - source_connection_id: str.
        ---
        from polytomic import BulkSchedule
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.bulk_sync.create(
            destination_connection_id="248df4b7-aa70-47b8-a036-33ac447e668d",
            mode="mode",
            name="name",
            schedule=BulkSchedule(
                frequency="frequency",
            ),
            source_connection_id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _request: typing.Dict[str, typing.Any] = {
            "destination_connection_id": destination_connection_id,
            "mode": mode,
            "name": name,
            "schedule": schedule,
            "source_connection_id": source_connection_id,
        }
        if active is not OMIT:
            _request["active"] = active
        if automatically_add_new_fields is not OMIT:
            _request["automatically_add_new_fields"] = automatically_add_new_fields
        if automatically_add_new_objects is not OMIT:
            _request["automatically_add_new_objects"] = automatically_add_new_objects
        if destination_configuration is not OMIT:
            _request["destination_configuration"] = destination_configuration
        if disable_record_timestamps is not OMIT:
            _request["disable_record_timestamps"] = disable_record_timestamps
        if discover is not OMIT:
            _request["discover"] = discover
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        if policies is not OMIT:
            _request["policies"] = policies
        if schemas is not OMIT:
            _request["schemas"] = schemas
        if source_configuration is not OMIT:
            _request["source_configuration"] = source_configuration
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/bulk/syncs"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2BulkSyncResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, id: str, *, refresh_schemas: typing.Optional[bool] = None) -> V2BulkSyncResponseEnvelope:
        """
        Parameters:
            - id: str.

            - refresh_schemas: typing.Optional[bool].
        ---
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.bulk_sync.get(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/bulk/syncs/{id}"),
            params=remove_none_from_dict({"refresh_schemas": refresh_schemas}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2BulkSyncResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def remove(self, id: str, *, refresh_schemas: typing.Optional[bool] = None) -> None:
        """
        Parameters:
            - id: str.

            - refresh_schemas: typing.Optional[bool].
        ---
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.bulk_sync.remove(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/bulk/syncs/{id}"),
            params=remove_none_from_dict({"refresh_schemas": refresh_schemas}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: str,
        *,
        active: typing.Optional[bool] = OMIT,
        destination_configuration: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        destination_connection_id: str,
        discover: typing.Optional[bool] = OMIT,
        mode: str,
        name: str,
        organization_id: typing.Optional[str] = OMIT,
        policies: typing.Optional[typing.List[str]] = OMIT,
        schedule: BulkSchedule,
        source_configuration: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        source_connection_id: str,
    ) -> V2BulkSyncResponseEnvelope:
        """
        > 📘 Updating schemas
        >
        > Schema updates can be performed using the [Update Bulk Sync Schemas](https://docs.polytomic.com/reference/apiv3updatebulksyncschemas) endpoint.

        Parameters:
            - id: str.

            - active: typing.Optional[bool].

            - destination_configuration: typing.Optional[typing.Dict[str, typing.Any]].

            - destination_connection_id: str.

            - discover: typing.Optional[bool].

            - mode: str.

            - name: str.

            - organization_id: typing.Optional[str].

            - policies: typing.Optional[typing.List[str]].

            - schedule: BulkSchedule.

            - source_configuration: typing.Optional[typing.Dict[str, typing.Any]].

            - source_connection_id: str.
        ---
        from polytomic import BulkSchedule
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.bulk_sync.update(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
            destination_connection_id="248df4b7-aa70-47b8-a036-33ac447e668d",
            mode="mode",
            name="name",
            schedule=BulkSchedule(
                frequency="frequency",
            ),
            source_connection_id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _request: typing.Dict[str, typing.Any] = {
            "destination_connection_id": destination_connection_id,
            "mode": mode,
            "name": name,
            "schedule": schedule,
            "source_connection_id": source_connection_id,
        }
        if active is not OMIT:
            _request["active"] = active
        if destination_configuration is not OMIT:
            _request["destination_configuration"] = destination_configuration
        if discover is not OMIT:
            _request["discover"] = discover
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        if policies is not OMIT:
            _request["policies"] = policies
        if source_configuration is not OMIT:
            _request["source_configuration"] = source_configuration
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/bulk/syncs/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2BulkSyncResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def activate(self, id: str, *, request: V2ActivateSyncInput) -> V2ActivateSyncEnvelope:
        """
        Parameters:
            - id: str.

            - request: V2ActivateSyncInput.
        ---
        from polytomic import V2ActivateSyncInput
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.bulk_sync.activate(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
            request=V2ActivateSyncInput(
                active=True,
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/bulk/syncs/{id}/activate"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2ActivateSyncEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_status(self, id: str) -> V3BulkSyncStatusEnvelope:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.bulk_sync.get_status(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/bulk/syncs/{id}/status"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V3BulkSyncStatusEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
