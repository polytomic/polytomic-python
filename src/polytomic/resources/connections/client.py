# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.unauthorized_error import UnauthorizedError
from ...types.rest_err_response import RestErrResponse
from ...types.v_2_connection_list_response_envelope import V2ConnectionListResponseEnvelope
from ...types.v_2_connection_response_envelope import V2ConnectionResponseEnvelope
from ...types.v_2_connection_type_response_envelope import V2ConnectionTypeResponseEnvelope
from ...types.v_2_create_connection_response_envelope import V2CreateConnectionResponseEnvelope
from ...types.v_2_get_connection_meta_envelope import V2GetConnectionMetaEnvelope
from ...types.v_2_model_field_response import V2ModelFieldResponse
from ...types.v_2_target_response_envelope import V2TargetResponseEnvelope
from ...types.v_3_connect_card_response_envelope import V3ConnectCardResponseEnvelope

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ConnectionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_types(self) -> V2ConnectionTypeResponseEnvelope:
        """
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.connections.get_types()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/connection_types"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2ConnectionTypeResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(self) -> V2ConnectionListResponseEnvelope:
        """
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.connections.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/connections"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2ConnectionListResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        configuration: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        name: str,
        organization_id: typing.Optional[str] = OMIT,
        policies: typing.Optional[typing.List[str]] = OMIT,
        redirect_url: typing.Optional[str] = OMIT,
        type: str,
        validate: typing.Optional[bool] = OMIT,
    ) -> V2CreateConnectionResponseEnvelope:
        """
        Parameters:
            - configuration: typing.Optional[typing.Dict[str, typing.Any]].

            - name: str.

            - organization_id: typing.Optional[str].

            - policies: typing.Optional[typing.List[str]].

            - redirect_url: typing.Optional[str]. URL to redirect to after completing OAuth flow.

            - type: str.

            - validate: typing.Optional[bool]. Validate connection configuration.
        ---
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.connections.create(
            name="name",
            type="type",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name, "type": type}
        if configuration is not OMIT:
            _request["configuration"] = configuration
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        if policies is not OMIT:
            _request["policies"] = policies
        if redirect_url is not OMIT:
            _request["redirect_url"] = redirect_url
        if validate is not OMIT:
            _request["validate"] = validate
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/connections"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2CreateConnectionResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_3_connect(
        self,
        *,
        connection: typing.Optional[str] = OMIT,
        name: str,
        organization_id: typing.Optional[str] = OMIT,
        redirect_url: str,
        type: typing.Optional[str] = OMIT,
        whitelist: typing.Optional[typing.List[str]] = OMIT,
    ) -> V3ConnectCardResponseEnvelope:
        """
        Parameters:
            - connection: typing.Optional[str].

            - name: str.

            - organization_id: typing.Optional[str].

            - redirect_url: str.

            - type: typing.Optional[str].

            - whitelist: typing.Optional[typing.List[str]].
        ---
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.connections.api_v_3_connect(
            connection="248df4b7-aa70-47b8-a036-33ac447e668d",
            name="name",
            redirect_url="redirect_url",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name, "redirect_url": redirect_url}
        if connection is not OMIT:
            _request["connection"] = connection
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        if type is not OMIT:
            _request["type"] = type
        if whitelist is not OMIT:
            _request["whitelist"] = whitelist
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/connections/connect"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V3ConnectCardResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, id: str) -> V2ConnectionResponseEnvelope:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.connections.get(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/connections/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2ConnectionResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def remove(self, id: str, *, force: typing.Optional[bool] = None) -> None:
        """
        Parameters:
            - id: str.

            - force: typing.Optional[bool].
        ---
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.connections.remove(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/connections/{id}"),
            params=remove_none_from_dict({"force": force}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: str,
        *,
        configuration: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        name: str,
        organization_id: typing.Optional[str] = OMIT,
        policies: typing.Optional[typing.List[str]] = OMIT,
        reconnect: typing.Optional[bool] = OMIT,
        type: typing.Optional[str] = OMIT,
        validate: typing.Optional[bool] = OMIT,
    ) -> V2CreateConnectionResponseEnvelope:
        """
        Parameters:
            - id: str.

            - configuration: typing.Optional[typing.Dict[str, typing.Any]].

            - name: str.

            - organization_id: typing.Optional[str].

            - policies: typing.Optional[typing.List[str]].

            - reconnect: typing.Optional[bool].

            - type: typing.Optional[str].

            - validate: typing.Optional[bool]. Validate connection configuration.
        ---
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.connections.update(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
            name="name",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if configuration is not OMIT:
            _request["configuration"] = configuration
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        if policies is not OMIT:
            _request["policies"] = policies
        if reconnect is not OMIT:
            _request["reconnect"] = reconnect
        if type is not OMIT:
            _request["type"] = type
        if validate is not OMIT:
            _request["validate"] = validate
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/connections/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2CreateConnectionResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_source(self, id: str) -> V2GetConnectionMetaEnvelope:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.connections.get_source(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/connections/{id}/source"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2GetConnectionMetaEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_source_fields(
        self, id: str, *, query: typing.Optional[typing.Dict[str, typing.Any]] = OMIT
    ) -> V2ModelFieldResponse:
        """
        Parameters:
            - id: str.

            - query: typing.Optional[typing.Dict[str, typing.Any]].
        ---
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.connections.get_source_fields(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if query is not OMIT:
            _request["query"] = query
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/connections/{id}/source/fields"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2ModelFieldResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_target(
        self, id: str, *, type: typing.Optional[str] = None, search: typing.Optional[str] = None
    ) -> V2GetConnectionMetaEnvelope:
        """
        Parameters:
            - id: str.

            - type: typing.Optional[str].

            - search: typing.Optional[str].
        ---
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.connections.get_target(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/connections/{id}/target"),
            params=remove_none_from_dict({"type": type, "search": search}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2GetConnectionMetaEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_target_fields(
        self, id: str, *, refresh: typing.Optional[bool] = OMIT, target: str
    ) -> V2TargetResponseEnvelope:
        """
        Parameters:
            - id: str.

            - refresh: typing.Optional[bool].

            - target: str.
        ---
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.connections.get_target_fields(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
            target="database.table",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"target": target}
        if refresh is not OMIT:
            _request["refresh"] = refresh
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/connections/{id}/target/fields"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2TargetResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def connect(self) -> None:
        """
        from polytomic.client import Polytomic

        client = Polytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        client.connections.connect()
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/connections/connect"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncConnectionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_types(self) -> V2ConnectionTypeResponseEnvelope:
        """
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.connections.get_types()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/connection_types"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2ConnectionTypeResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(self) -> V2ConnectionListResponseEnvelope:
        """
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.connections.list()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/connections"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2ConnectionListResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        configuration: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        name: str,
        organization_id: typing.Optional[str] = OMIT,
        policies: typing.Optional[typing.List[str]] = OMIT,
        redirect_url: typing.Optional[str] = OMIT,
        type: str,
        validate: typing.Optional[bool] = OMIT,
    ) -> V2CreateConnectionResponseEnvelope:
        """
        Parameters:
            - configuration: typing.Optional[typing.Dict[str, typing.Any]].

            - name: str.

            - organization_id: typing.Optional[str].

            - policies: typing.Optional[typing.List[str]].

            - redirect_url: typing.Optional[str]. URL to redirect to after completing OAuth flow.

            - type: str.

            - validate: typing.Optional[bool]. Validate connection configuration.
        ---
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.connections.create(
            name="name",
            type="type",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name, "type": type}
        if configuration is not OMIT:
            _request["configuration"] = configuration
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        if policies is not OMIT:
            _request["policies"] = policies
        if redirect_url is not OMIT:
            _request["redirect_url"] = redirect_url
        if validate is not OMIT:
            _request["validate"] = validate
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/connections"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2CreateConnectionResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_3_connect(
        self,
        *,
        connection: typing.Optional[str] = OMIT,
        name: str,
        organization_id: typing.Optional[str] = OMIT,
        redirect_url: str,
        type: typing.Optional[str] = OMIT,
        whitelist: typing.Optional[typing.List[str]] = OMIT,
    ) -> V3ConnectCardResponseEnvelope:
        """
        Parameters:
            - connection: typing.Optional[str].

            - name: str.

            - organization_id: typing.Optional[str].

            - redirect_url: str.

            - type: typing.Optional[str].

            - whitelist: typing.Optional[typing.List[str]].
        ---
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.connections.api_v_3_connect(
            connection="248df4b7-aa70-47b8-a036-33ac447e668d",
            name="name",
            redirect_url="redirect_url",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name, "redirect_url": redirect_url}
        if connection is not OMIT:
            _request["connection"] = connection
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        if type is not OMIT:
            _request["type"] = type
        if whitelist is not OMIT:
            _request["whitelist"] = whitelist
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/connections/connect"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V3ConnectCardResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, id: str) -> V2ConnectionResponseEnvelope:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.connections.get(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/connections/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2ConnectionResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def remove(self, id: str, *, force: typing.Optional[bool] = None) -> None:
        """
        Parameters:
            - id: str.

            - force: typing.Optional[bool].
        ---
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.connections.remove(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/connections/{id}"),
            params=remove_none_from_dict({"force": force}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: str,
        *,
        configuration: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        name: str,
        organization_id: typing.Optional[str] = OMIT,
        policies: typing.Optional[typing.List[str]] = OMIT,
        reconnect: typing.Optional[bool] = OMIT,
        type: typing.Optional[str] = OMIT,
        validate: typing.Optional[bool] = OMIT,
    ) -> V2CreateConnectionResponseEnvelope:
        """
        Parameters:
            - id: str.

            - configuration: typing.Optional[typing.Dict[str, typing.Any]].

            - name: str.

            - organization_id: typing.Optional[str].

            - policies: typing.Optional[typing.List[str]].

            - reconnect: typing.Optional[bool].

            - type: typing.Optional[str].

            - validate: typing.Optional[bool]. Validate connection configuration.
        ---
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.connections.update(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
            name="name",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if configuration is not OMIT:
            _request["configuration"] = configuration
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        if policies is not OMIT:
            _request["policies"] = policies
        if reconnect is not OMIT:
            _request["reconnect"] = reconnect
        if type is not OMIT:
            _request["type"] = type
        if validate is not OMIT:
            _request["validate"] = validate
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/connections/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2CreateConnectionResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_source(self, id: str) -> V2GetConnectionMetaEnvelope:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.connections.get_source(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/connections/{id}/source"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2GetConnectionMetaEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_source_fields(
        self, id: str, *, query: typing.Optional[typing.Dict[str, typing.Any]] = OMIT
    ) -> V2ModelFieldResponse:
        """
        Parameters:
            - id: str.

            - query: typing.Optional[typing.Dict[str, typing.Any]].
        ---
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.connections.get_source_fields(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if query is not OMIT:
            _request["query"] = query
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/connections/{id}/source/fields"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2ModelFieldResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_target(
        self, id: str, *, type: typing.Optional[str] = None, search: typing.Optional[str] = None
    ) -> V2GetConnectionMetaEnvelope:
        """
        Parameters:
            - id: str.

            - type: typing.Optional[str].

            - search: typing.Optional[str].
        ---
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.connections.get_target(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/connections/{id}/target"),
            params=remove_none_from_dict({"type": type, "search": search}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2GetConnectionMetaEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_target_fields(
        self, id: str, *, refresh: typing.Optional[bool] = OMIT, target: str
    ) -> V2TargetResponseEnvelope:
        """
        Parameters:
            - id: str.

            - refresh: typing.Optional[bool].

            - target: str.
        ---
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.connections.get_target_fields(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
            target="database.table",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"target": target}
        if refresh is not OMIT:
            _request["refresh"] = refresh
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/connections/{id}/target/fields"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2TargetResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def connect(self) -> None:
        """
        from polytomic.client import AsyncPolytomic

        client = AsyncPolytomic(
            polytomic_version="YOUR_POLYTOMIC_VERSION",
            token="YOUR_TOKEN",
        )
        await client.connections.connect()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/connections/connect"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
