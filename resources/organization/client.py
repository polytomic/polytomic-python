# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...errors.unauthorized_error import UnauthorizedError
from ...types.rest_err_response import RestErrResponse
from ...types.v_2_organization_envelope import V2OrganizationEnvelope
from ...types.v_2_organizations_envelope import V2OrganizationsEnvelope

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class OrganizationClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def api_v_2_get_organizations(self) -> V2OrganizationsEnvelope:
        """
        > ðŸš§ Requires partner key
        >
        > Organization endpoints are only accessible using [partner keys](https://docs.polytomic.com/reference/authentication#partner-keys)

        ---
        from polytomic.client import PolytomicApi

        client = PolytomicApi(
            token="YOUR_TOKEN",
        )
        client.organization.api_v_2_get_organizations()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/organizations"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2OrganizationsEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_2_create_organization(
        self, *, name: str, sso_domain: typing.Optional[str] = OMIT, sso_org_id: typing.Optional[str] = OMIT
    ) -> V2OrganizationEnvelope:
        """
        > ðŸš§ Requires partner key
        >
        > Organization endpoints are only accessible using [partner keys](https://docs.polytomic.com/reference/authentication#partner-keys)

        Parameters:
            - name: str.

            - sso_domain: typing.Optional[str].

            - sso_org_id: typing.Optional[str].
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if sso_domain is not OMIT:
            _request["sso_domain"] = sso_domain
        if sso_org_id is not OMIT:
            _request["sso_org_id"] = sso_org_id
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/organizations"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2OrganizationEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_2_get_organization(self, id: str) -> V2OrganizationEnvelope:
        """
        > ðŸš§ Requires partner key
        >
        > Organization endpoints are only accessible using [partner keys](https://docs.polytomic.com/reference/authentication#partner-keys)

        Parameters:
            - id: str.
        ---
        from polytomic.client import PolytomicApi

        client = PolytomicApi(
            token="YOUR_TOKEN",
        )
        client.organization.api_v_2_get_organization(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/organizations/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2OrganizationEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_2_remove_organization(self, id: str) -> None:
        """
        > ðŸš§ Requires partner key
        >
        > Organization endpoints are only accessible using [partner keys](https://docs.polytomic.com/reference/authentication#partner-keys)

        Parameters:
            - id: str.
        ---
        from polytomic.client import PolytomicApi

        client = PolytomicApi(
            token="YOUR_TOKEN",
        )
        client.organization.api_v_2_remove_organization(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/organizations/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_2_update_organization(
        self, id: str, *, name: str, sso_domain: typing.Optional[str] = OMIT, sso_org_id: typing.Optional[str] = OMIT
    ) -> V2OrganizationEnvelope:
        """
        > ðŸš§ Requires partner key
        >
        > Organization endpoints are only accessible using [partner keys](https://docs.polytomic.com/reference/authentication#partner-keys)

        Parameters:
            - id: str.

            - name: str.

            - sso_domain: typing.Optional[str].

            - sso_org_id: typing.Optional[str].
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if sso_domain is not OMIT:
            _request["sso_domain"] = sso_domain
        if sso_org_id is not OMIT:
            _request["sso_org_id"] = sso_org_id
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/organizations/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2OrganizationEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncOrganizationClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def api_v_2_get_organizations(self) -> V2OrganizationsEnvelope:
        """
        > ðŸš§ Requires partner key
        >
        > Organization endpoints are only accessible using [partner keys](https://docs.polytomic.com/reference/authentication#partner-keys)

        ---
        from polytomic.client import AsyncPolytomicApi

        client = AsyncPolytomicApi(
            token="YOUR_TOKEN",
        )
        await client.organization.api_v_2_get_organizations()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/organizations"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2OrganizationsEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_2_create_organization(
        self, *, name: str, sso_domain: typing.Optional[str] = OMIT, sso_org_id: typing.Optional[str] = OMIT
    ) -> V2OrganizationEnvelope:
        """
        > ðŸš§ Requires partner key
        >
        > Organization endpoints are only accessible using [partner keys](https://docs.polytomic.com/reference/authentication#partner-keys)

        Parameters:
            - name: str.

            - sso_domain: typing.Optional[str].

            - sso_org_id: typing.Optional[str].
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if sso_domain is not OMIT:
            _request["sso_domain"] = sso_domain
        if sso_org_id is not OMIT:
            _request["sso_org_id"] = sso_org_id
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/organizations"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2OrganizationEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_2_get_organization(self, id: str) -> V2OrganizationEnvelope:
        """
        > ðŸš§ Requires partner key
        >
        > Organization endpoints are only accessible using [partner keys](https://docs.polytomic.com/reference/authentication#partner-keys)

        Parameters:
            - id: str.
        ---
        from polytomic.client import AsyncPolytomicApi

        client = AsyncPolytomicApi(
            token="YOUR_TOKEN",
        )
        await client.organization.api_v_2_get_organization(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/organizations/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2OrganizationEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_2_remove_organization(self, id: str) -> None:
        """
        > ðŸš§ Requires partner key
        >
        > Organization endpoints are only accessible using [partner keys](https://docs.polytomic.com/reference/authentication#partner-keys)

        Parameters:
            - id: str.
        ---
        from polytomic.client import AsyncPolytomicApi

        client = AsyncPolytomicApi(
            token="YOUR_TOKEN",
        )
        await client.organization.api_v_2_remove_organization(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/organizations/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_2_update_organization(
        self, id: str, *, name: str, sso_domain: typing.Optional[str] = OMIT, sso_org_id: typing.Optional[str] = OMIT
    ) -> V2OrganizationEnvelope:
        """
        > ðŸš§ Requires partner key
        >
        > Organization endpoints are only accessible using [partner keys](https://docs.polytomic.com/reference/authentication#partner-keys)

        Parameters:
            - id: str.

            - name: str.

            - sso_domain: typing.Optional[str].

            - sso_org_id: typing.Optional[str].
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if sso_domain is not OMIT:
            _request["sso_domain"] = sso_domain
        if sso_org_id is not OMIT:
            _request["sso_org_id"] = sso_org_id
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/organizations/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2OrganizationEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
