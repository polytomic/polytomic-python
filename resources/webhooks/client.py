# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...errors.unauthorized_error import UnauthorizedError
from ...types.rest_err_response import RestErrResponse
from ...types.v_2_webhook_envelope import V2WebhookEnvelope
from ...types.v_2_webhook_list_envelope import V2WebhookListEnvelope

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class WebhooksClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def api_v_2_list_webhooks(self) -> V2WebhookListEnvelope:
        """
        Webooks can be set up using the webhook API endpoints. Currently, only one
        webhook may be created per organization. The webhook will be called for events
        in that organization.

        Consult the [Events documentation](https://docs.polytomic.com/reference/events) for more information.

        ---
        from polytomic.client import PolytomicApi

        client = PolytomicApi(
            token="YOUR_TOKEN",
        )
        client.webhooks.api_v_2_list_webhooks()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/webhooks"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2WebhookListEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_2_create_webhook(
        self, *, endpoint: str, organization_id: typing.Optional[str] = OMIT, secret: str
    ) -> V2WebhookEnvelope:
        """
        Webooks can be set up using the webhook API endpoints. Currently, only one
        webhook may be created per organization. The webhook will be called for events
        in that organization.

        Consult the [Events documentation](https://docs.polytomic.com/reference/events) for more information.

        Parameters:
            - endpoint: str.

            - organization_id: typing.Optional[str].

            - secret: str.
        """
        _request: typing.Dict[str, typing.Any] = {"endpoint": endpoint, "secret": secret}
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/webhooks"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2WebhookEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_2_get_webhook(self, id: str) -> V2WebhookEnvelope:
        """
        Webooks can be set up using the webhook API endpoints. Currently, only one
        webhook may be created per organization. The webhook will be called for events
        in that organization.

        Consult the [Events documentation](https://docs.polytomic.com/reference/events) for more information.

        Parameters:
            - id: str.
        ---
        from polytomic.client import PolytomicApi

        client = PolytomicApi(
            token="YOUR_TOKEN",
        )
        client.webhooks.api_v_2_get_webhook(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/webhooks/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2WebhookEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_2_delete_webhook(self, id: str) -> None:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import PolytomicApi

        client = PolytomicApi(
            token="YOUR_TOKEN",
        )
        client.webhooks.api_v_2_delete_webhook(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/webhooks/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_2_update_webhook(
        self, id: str, *, endpoint: str, organization_id: typing.Optional[str] = OMIT, secret: str
    ) -> V2WebhookEnvelope:
        """
        Webooks can be set up using the webhook API endpoints. Currently, only one
        webhook may be created per organization. The webhook will be called for events
        in that organization.

        Consult the [Events documentation](https://docs.polytomic.com/reference/events) for more information.

        Parameters:
            - id: str.

            - endpoint: str.

            - organization_id: typing.Optional[str].

            - secret: str.
        """
        _request: typing.Dict[str, typing.Any] = {"endpoint": endpoint, "secret": secret}
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/webhooks/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2WebhookEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncWebhooksClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def api_v_2_list_webhooks(self) -> V2WebhookListEnvelope:
        """
        Webooks can be set up using the webhook API endpoints. Currently, only one
        webhook may be created per organization. The webhook will be called for events
        in that organization.

        Consult the [Events documentation](https://docs.polytomic.com/reference/events) for more information.

        ---
        from polytomic.client import AsyncPolytomicApi

        client = AsyncPolytomicApi(
            token="YOUR_TOKEN",
        )
        await client.webhooks.api_v_2_list_webhooks()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/webhooks"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2WebhookListEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_2_create_webhook(
        self, *, endpoint: str, organization_id: typing.Optional[str] = OMIT, secret: str
    ) -> V2WebhookEnvelope:
        """
        Webooks can be set up using the webhook API endpoints. Currently, only one
        webhook may be created per organization. The webhook will be called for events
        in that organization.

        Consult the [Events documentation](https://docs.polytomic.com/reference/events) for more information.

        Parameters:
            - endpoint: str.

            - organization_id: typing.Optional[str].

            - secret: str.
        """
        _request: typing.Dict[str, typing.Any] = {"endpoint": endpoint, "secret": secret}
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/webhooks"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2WebhookEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_2_get_webhook(self, id: str) -> V2WebhookEnvelope:
        """
        Webooks can be set up using the webhook API endpoints. Currently, only one
        webhook may be created per organization. The webhook will be called for events
        in that organization.

        Consult the [Events documentation](https://docs.polytomic.com/reference/events) for more information.

        Parameters:
            - id: str.
        ---
        from polytomic.client import AsyncPolytomicApi

        client = AsyncPolytomicApi(
            token="YOUR_TOKEN",
        )
        await client.webhooks.api_v_2_get_webhook(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/webhooks/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2WebhookEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_2_delete_webhook(self, id: str) -> None:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import AsyncPolytomicApi

        client = AsyncPolytomicApi(
            token="YOUR_TOKEN",
        )
        await client.webhooks.api_v_2_delete_webhook(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/webhooks/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_2_update_webhook(
        self, id: str, *, endpoint: str, organization_id: typing.Optional[str] = OMIT, secret: str
    ) -> V2WebhookEnvelope:
        """
        Webooks can be set up using the webhook API endpoints. Currently, only one
        webhook may be created per organization. The webhook will be called for events
        in that organization.

        Consult the [Events documentation](https://docs.polytomic.com/reference/events) for more information.

        Parameters:
            - id: str.

            - endpoint: str.

            - organization_id: typing.Optional[str].

            - secret: str.
        """
        _request: typing.Dict[str, typing.Any] = {"endpoint": endpoint, "secret": secret}
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/webhooks/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2WebhookEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
