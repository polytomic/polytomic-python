# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...errors.unauthorized_error import UnauthorizedError
from ...types.rest_err_response import RestErrResponse
from ...types.v_2_list_policies_response_envelope import V2ListPoliciesResponseEnvelope
from ...types.v_2_policy_action import V2PolicyAction
from ...types.v_2_policy_response_envelope import V2PolicyResponseEnvelope
from ...types.v_2_role_list_response_envelope import V2RoleListResponseEnvelope
from ...types.v_2_role_response_envelope import V2RoleResponseEnvelope

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PermissionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def api_v_2_list_policies(self) -> V2ListPoliciesResponseEnvelope:
        """
        from polytomic.client import PolytomicApi

        client = PolytomicApi(
            token="YOUR_TOKEN",
        )
        client.permissions.api_v_2_list_policies()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/permissions/policies"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2ListPoliciesResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_2_create_policy(
        self,
        *,
        name: str,
        organization_id: typing.Optional[str] = OMIT,
        policy_actions: typing.Optional[typing.List[V2PolicyAction]] = OMIT,
    ) -> V2PolicyResponseEnvelope:
        """
        Parameters:
            - name: str.

            - organization_id: typing.Optional[str].

            - policy_actions: typing.Optional[typing.List[V2PolicyAction]].
        ---
        from polytomic import V2PolicyAction
        from polytomic.client import PolytomicApi

        client = PolytomicApi(
            token="YOUR_TOKEN",
        )
        client.permissions.api_v_2_create_policy(
            name="Custom",
            organization_id="248df4b7-aa70-47b8-a036-33ac447e668d",
            policy_actions=[
                V2PolicyAction(
                    action="read",
                    role_ids=["248df4b7-aa70-47b8-a036-33ac447e668d"],
                )
            ],
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        if policy_actions is not OMIT:
            _request["policy_actions"] = policy_actions
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/permissions/policies"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2PolicyResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_2_get_policy(self, id: str) -> V2PolicyResponseEnvelope:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import PolytomicApi

        client = PolytomicApi(
            token="YOUR_TOKEN",
        )
        client.permissions.api_v_2_get_policy(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/permissions/policies/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2PolicyResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_2_delete_policy(self, id: str) -> None:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import PolytomicApi

        client = PolytomicApi(
            token="YOUR_TOKEN",
        )
        client.permissions.api_v_2_delete_policy(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/permissions/policies/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_2_update_policy(
        self,
        id: str,
        *,
        name: str,
        organization_id: typing.Optional[str] = OMIT,
        policy_actions: typing.Optional[typing.List[V2PolicyAction]] = OMIT,
    ) -> V2PolicyResponseEnvelope:
        """
        Parameters:
            - id: str.

            - name: str.

            - organization_id: typing.Optional[str].

            - policy_actions: typing.Optional[typing.List[V2PolicyAction]].
        ---
        from polytomic import V2PolicyAction
        from polytomic.client import PolytomicApi

        client = PolytomicApi(
            token="YOUR_TOKEN",
        )
        client.permissions.api_v_2_update_policy(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
            name="Custom",
            organization_id="248df4b7-aa70-47b8-a036-33ac447e668d",
            policy_actions=[
                V2PolicyAction(
                    action="read",
                    role_ids=["248df4b7-aa70-47b8-a036-33ac447e668d"],
                )
            ],
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        if policy_actions is not OMIT:
            _request["policy_actions"] = policy_actions
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/permissions/policies/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2PolicyResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_2_list_roles(self) -> V2RoleListResponseEnvelope:
        """
        from polytomic.client import PolytomicApi

        client = PolytomicApi(
            token="YOUR_TOKEN",
        )
        client.permissions.api_v_2_list_roles()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/permissions/roles"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2RoleListResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_2_create_role(self, *, name: str, organization_id: typing.Optional[str] = OMIT) -> V2RoleResponseEnvelope:
        """
        Parameters:
            - name: str.

            - organization_id: typing.Optional[str].
        ---
        from polytomic.client import PolytomicApi

        client = PolytomicApi(
            token="YOUR_TOKEN",
        )
        client.permissions.api_v_2_create_role(
            name="Custom",
            organization_id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/permissions/roles"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2RoleResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_2_get_role(self, id: str) -> V2RoleResponseEnvelope:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import PolytomicApi

        client = PolytomicApi(
            token="YOUR_TOKEN",
        )
        client.permissions.api_v_2_get_role(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/permissions/roles/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2RoleResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_2_delete_role(self, id: str) -> None:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import PolytomicApi

        client = PolytomicApi(
            token="YOUR_TOKEN",
        )
        client.permissions.api_v_2_delete_role(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/permissions/roles/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_v_2_update_role(
        self, id: str, *, name: str, organization_id: typing.Optional[str] = OMIT
    ) -> V2RoleResponseEnvelope:
        """
        Parameters:
            - id: str.

            - name: str.

            - organization_id: typing.Optional[str].
        ---
        from polytomic.client import PolytomicApi

        client = PolytomicApi(
            token="YOUR_TOKEN",
        )
        client.permissions.api_v_2_update_role(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
            name="Custom",
            organization_id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/permissions/roles/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2RoleResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPermissionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def api_v_2_list_policies(self) -> V2ListPoliciesResponseEnvelope:
        """
        from polytomic.client import AsyncPolytomicApi

        client = AsyncPolytomicApi(
            token="YOUR_TOKEN",
        )
        await client.permissions.api_v_2_list_policies()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/permissions/policies"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2ListPoliciesResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_2_create_policy(
        self,
        *,
        name: str,
        organization_id: typing.Optional[str] = OMIT,
        policy_actions: typing.Optional[typing.List[V2PolicyAction]] = OMIT,
    ) -> V2PolicyResponseEnvelope:
        """
        Parameters:
            - name: str.

            - organization_id: typing.Optional[str].

            - policy_actions: typing.Optional[typing.List[V2PolicyAction]].
        ---
        from polytomic import V2PolicyAction
        from polytomic.client import AsyncPolytomicApi

        client = AsyncPolytomicApi(
            token="YOUR_TOKEN",
        )
        await client.permissions.api_v_2_create_policy(
            name="Custom",
            organization_id="248df4b7-aa70-47b8-a036-33ac447e668d",
            policy_actions=[
                V2PolicyAction(
                    action="read",
                    role_ids=["248df4b7-aa70-47b8-a036-33ac447e668d"],
                )
            ],
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        if policy_actions is not OMIT:
            _request["policy_actions"] = policy_actions
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/permissions/policies"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2PolicyResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_2_get_policy(self, id: str) -> V2PolicyResponseEnvelope:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import AsyncPolytomicApi

        client = AsyncPolytomicApi(
            token="YOUR_TOKEN",
        )
        await client.permissions.api_v_2_get_policy(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/permissions/policies/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2PolicyResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_2_delete_policy(self, id: str) -> None:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import AsyncPolytomicApi

        client = AsyncPolytomicApi(
            token="YOUR_TOKEN",
        )
        await client.permissions.api_v_2_delete_policy(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/permissions/policies/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_2_update_policy(
        self,
        id: str,
        *,
        name: str,
        organization_id: typing.Optional[str] = OMIT,
        policy_actions: typing.Optional[typing.List[V2PolicyAction]] = OMIT,
    ) -> V2PolicyResponseEnvelope:
        """
        Parameters:
            - id: str.

            - name: str.

            - organization_id: typing.Optional[str].

            - policy_actions: typing.Optional[typing.List[V2PolicyAction]].
        ---
        from polytomic import V2PolicyAction
        from polytomic.client import AsyncPolytomicApi

        client = AsyncPolytomicApi(
            token="YOUR_TOKEN",
        )
        await client.permissions.api_v_2_update_policy(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
            name="Custom",
            organization_id="248df4b7-aa70-47b8-a036-33ac447e668d",
            policy_actions=[
                V2PolicyAction(
                    action="read",
                    role_ids=["248df4b7-aa70-47b8-a036-33ac447e668d"],
                )
            ],
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        if policy_actions is not OMIT:
            _request["policy_actions"] = policy_actions
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/permissions/policies/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2PolicyResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_2_list_roles(self) -> V2RoleListResponseEnvelope:
        """
        from polytomic.client import AsyncPolytomicApi

        client = AsyncPolytomicApi(
            token="YOUR_TOKEN",
        )
        await client.permissions.api_v_2_list_roles()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/permissions/roles"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2RoleListResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_2_create_role(
        self, *, name: str, organization_id: typing.Optional[str] = OMIT
    ) -> V2RoleResponseEnvelope:
        """
        Parameters:
            - name: str.

            - organization_id: typing.Optional[str].
        ---
        from polytomic.client import AsyncPolytomicApi

        client = AsyncPolytomicApi(
            token="YOUR_TOKEN",
        )
        await client.permissions.api_v_2_create_role(
            name="Custom",
            organization_id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/permissions/roles"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2RoleResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_2_get_role(self, id: str) -> V2RoleResponseEnvelope:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import AsyncPolytomicApi

        client = AsyncPolytomicApi(
            token="YOUR_TOKEN",
        )
        await client.permissions.api_v_2_get_role(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/permissions/roles/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2RoleResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_2_delete_role(self, id: str) -> None:
        """
        Parameters:
            - id: str.
        ---
        from polytomic.client import AsyncPolytomicApi

        client = AsyncPolytomicApi(
            token="YOUR_TOKEN",
        )
        await client.permissions.api_v_2_delete_role(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/permissions/roles/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_v_2_update_role(
        self, id: str, *, name: str, organization_id: typing.Optional[str] = OMIT
    ) -> V2RoleResponseEnvelope:
        """
        Parameters:
            - id: str.

            - name: str.

            - organization_id: typing.Optional[str].
        ---
        from polytomic.client import AsyncPolytomicApi

        client = AsyncPolytomicApi(
            token="YOUR_TOKEN",
        )
        await client.permissions.api_v_2_update_role(
            id="248df4b7-aa70-47b8-a036-33ac447e668d",
            name="Custom",
            organization_id="248df4b7-aa70-47b8-a036-33ac447e668d",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if organization_id is not OMIT:
            _request["organization_id"] = organization_id
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/permissions/roles/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(V2RoleResponseEnvelope, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(RestErrResponse, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
